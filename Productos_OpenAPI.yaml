openapi: 3.0.0
info:
  title: Productos Mercadone
  description: API for products management
  version: 1.0.1
  contact:
    name: Team SOLID
    email: siez@gft.com
tags:
  - name: Products
    description: Everything about your products
paths:
  /products/getAll:
    get:
      tags:
        - Products
      summary: returns list of products
      description: returns list of products
      operationId: getProducts
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

        '404':
          description: product not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
              example:
                msg: "Error: No products found"
                error_code: 404
        '500':
          description: Error response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
              example:
                msg: "Error: response failed"
                error_code: 500

  /products/name/{name_product}:
    get:
      tags:
        - Products
      summary: returns list of products by name
      description: returns list of product given its name
      operationId: getProductByName
      parameters:
        - name: name_product
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
              example:
                msg: "Error: Id not found"
                error_code: 404
        '500':
          description: Error response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
              example:
                msg: "Error: response failed"
                error_code: 500


  /products/id/{id_product}:
    get:
      tags:
        - Products
      summary: returns a product by id
      description: return details of a product given its id
      operationId: getProductByID
      parameters:
        - name: id_product
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
              example:
                msg: "Error: Id not found"
                error_code: 404
        '500':
          description: Error response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
              example:
                msg: "Error: response failed"
                error_code: 500

  /products/updateStock/{id_product}:
    put:
      tags:
        - Products
      summary: update the stock
      description: you can update the stock of a product
      operationId: putProduct
      parameters:
        - name: id_product
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: update an existent product in the store
        content:
          text/plain:
            schema:
              type: integer
              example: 0
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '500':
          description: Error response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
              example:
                msg: "Error: response failed"
                error_code: 500
  
  /products/{id_product}:
    put:
      tags:
        - Products
      summary: update a product
      description: you can update a product
      operationId: putStock
      parameters:
        - name: id_product
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: update an existent product in the store
        content:
          text/plain:
            schema:
              type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '500':
          description: Error response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
              example:
                msg: "Error: response failed"
                error_code: 500
    
    delete:
      tags:
        - Products
      summary: delete a product
      description: delete an entire product
      operationId: deleteProduct
      parameters:
        - name: id_product
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ok
        '400':
          description: Invalid id supplied
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
              example:
                msg: "Error: Invalid id"
                error_code: 400
        '404':
          description: Show not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
              example:
                msg: "Error: sohow not found"
                error_code: 404
  /products:
    post:
      tags:
        - Products
      summary: add a new  product
      description: new product is created
      operationId: createProduct
      requestBody:
        description: product data required to create a product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: New product is created
          content:
            application/json:
              schema:
                type: integer
              example: 101
        '500':
          description: Error response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
              example:
                msg: "Error: response failed"
                error_code: 500

  /products/JSON_load:
    post:
      tags:
        - Products
      summary: Here you can load products from a JSON file given a path.
      description: The JSON needs to match the Products schema. The products table will be overwritten by this file content.
      operationId: loadJSONProducts
      parameters:
        - in: query
          name: path
          schema:
            type: string
          description: The path of the JSON file with the products.
      responses:
        '201':
          description: Products created.


components:
  schemas:
    Category:
      type: object
      required:
        - id
        - name
        - discount
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Juguetes
        discount:
          type: number
          format: double
          example: 20
    Product:
      type: object
      required:
        - id
        - name
        - category
        - description
        - price
        - stock
      
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Pelota Adidas
        category:
          type: object
          properties:
            name:
              type: string
              example: Jugetes
          required:
            - name
          description: Product category

        description:
          type: string
          example: Pelota Adidas Futbol Profesional.
        price:
          type: number
          format: double
          example: 19.99
        stock:
          type: integer
          format: int64
          example: 48

    Error:
      type: object
      properties:
        msg:
          type: string
        error_code:
          type: integer
          format: int64
